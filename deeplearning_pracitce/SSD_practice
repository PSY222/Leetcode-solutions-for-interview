##This code source if from 'Python deeplearning' book from Ogata Utaro

def make_datapath_list(rootpath):
    imgpath_template = osp.join(rootpath,'JPEGImages','%s.jpg')
    annotpath_template =osp.join(rootpath,'Annotations','%s.xml')

    train_id_names = osp.join(rootpath+'ImageSets/Main/train.txt')
    val_id_names =osp.join(rootpath+ImageSets/Main/val.txt)

    train_img_list = list()
    train_anno_list = list()

    for line in open(train_id_names):
        file_id = line.strip()
        img_path = (imgpath_template % file_id)
        anno_path = (annopath_template % file_id)
        train_img_list.append(img_path)
        train_anno_list.append(anno_path)

    val_img_list = list()
    val_anno_list = list()

    for line in open(val_id_names):
        file_id = line.strip()
        img_path = (imgpath_template % file_id)
        anno_path = (annopath_template % file_id)
        train_img_list.append(img_path)
        train_anno_list.append(anno_path)
    return train_img_list, train_anno_list, val_img_list, val_anno_list


#From xml to list type
class Anno_xml2list(object):
    def __init__(self,classes):
        self.classes = classes

    def __call__(self,xml_path, width,height):
        ret = []
        xml = ET.parse(xml_path).getroot()

        for obj in xml.iter('object'):
            difficult = int(obj.find('difficult').text)
            if difficult ==1:
                continue
            bndbox = []
            name = obj.find('name').text.lower().strip()
            bbox = obj.find('bndbox')

            pts = ['xmin','ymin','xmax','ymax']

            for pt in (pts):
                cur_pixel = int(bbox.find(pt).text)-1

                if pt=='xmin' or pt =='xmax':
                    cur_pixel /=width
                else:
                    cur_pixel /=height
                bndbox.append(cur_pixel)

            label_idx = self.classes.index(name)
            bndbox.append(label_idx)
            ret+=[bndbox]

#Under the assumption that there is data_augmentation.py file in utils folder

from utils.data_augmentation import Compose, ConvertFromInts, ToAbsoluteCoords, PhotometricDistort, Expand, RandomSampleCrop, RandomMirror, ToPercentCoords, Resize, SubtractMeans

class DataTransform():
    def __init__(self, input_size, color_mean):
        self.data_transform = {
            'train' : Compose([
                ConvertFromInts(),
                ToAbsoluteCoords(),
                PhotometricDistort(),
                Expand(color_mean),
                RandomSampleCrop(),
                RandomMirror(),
                ToPercentCoords(),
                Resize(input_size),
                SubtractMeans(color_mean)
            ]),
            'val':Compose([
                ConvertFromInts(),
                Resize(input_size),
                SubtractMeans(color_mean)
            ])
        }

    def __call__(self, img, phase, boxes, labels):
    return self.data_transform[phase](img,boxes,labels)

    
